FROM debian:bookworm-slim AS builder

ARG GITHUB_USER=openscad
ARG GITHUB_REPO=openscad
ARG BRANCH=master
ARG REFS=heads
ARG OPENSCAD_VERSION=
ARG BUILD_TYPE=Release
ARG SNAPSHOT=ON
ARG JOBS=1
ARG COMMIT=true

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get -y full-upgrade

# Base setup
RUN \
	apt-get install -y --no-install-recommends \
	build-essential devscripts apt-utils apt-transport-https ca-certificates git wget jq

# Dev dependencies
RUN \
	apt-get -y install --no-install-recommends \
	build-essential curl libffi-dev  libxmu-dev cmake bison flex \
	git-core libboost-all-dev libmpfr-dev libboost-dev \
	libcairo2-dev  libeigen3-dev libcgal-dev libopencsg-dev libgmp3-dev \
	libgmp-dev imagemagick libfreetype6-dev libdouble-conversion-dev \
	gtk-doc-tools libglib2.0-dev gettext pkg-config ragel libxi-dev \
	libfontconfig-dev libzip-dev lib3mf-dev libharfbuzz-dev libxml2-dev \
	qtbase5-dev libqt5scintilla2-dev libqt5opengl5-dev libqt5svg5-dev \
	qtmultimedia5-dev libqt5multimedia5-plugins libtbb-dev \
	python3-pip python3-venv \
	libegl-dev libegl1-mesa-dev

RUN \
	echo "deb-src http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list && \
	cat /etc/apt/sources.list && \
	apt-get update && \
	apt-get -y build-dep libglew-dev libopencsg-dev

RUN \
	groupadd -r openscad && \
	useradd -r -g openscad openscad && \
	mkdir /opencsg-build /glew-build /egl /openscad && \
	chown openscad:openscad /opencsg-build /glew-build /egl /openscad

USER openscad

WORKDIR /glew-build

# Build & install EGL glew
RUN \
	apt-get source libglew-dev && \
	cd $(find . -maxdepth 1 -type d -name 'glew-*') && \
	sed -i -e 's/SYSTEM[\t ?]*=.*$/SYSTEM = linux-egl/' Makefile && \
	dch -m -l egl -m "Configure for EGL" && \
	debuild -uc -us && \
	cp $(ls ../libglew*.deb | egrep -v -- '-(dev|dbgsym)_') /egl/

USER root

RUN dpkg -i libglew*.deb

USER openscad

WORKDIR /opencsg-build

# Build & install EGL patched version of OpenCSG
RUN \
	apt-get source libopencsg-dev && \
	cd $(find . -maxdepth 1 -type d -name 'opencsg-*') && \
	dch -m -l egl -m "Disable GLX dependencies" && \
	sed -i -e 's/example//' opencsg.pro && \
	sed -i -e 's/.*RenderTexture.*//' src/src.pro && \
	sed -i -e 's/.*pBufferTexture.*/\\/' src/src.pro && \
	sed -i -e 's/.*define.*OPENCSG_HAVE_PBUFFER.*//' src/opencsgConfig.h && \
	sed -i -e 's/GLXEW_SGIX_[a-z]*/false/' src/channelManager.cpp && \
	rm -rf debian/libopencsg-ex* && \
	debuild -uc -us -nc && \
	cp $(ls ../libopencsg*.deb | egrep -v -- '-(dev|dbg|example)_') /egl/

USER root

RUN dpkg -i libopencsg*.deb

USER openscad
WORKDIR /openscad

# Invalidate docker cache if the branch changes
ADD https://api.github.com/repos/${GITHUB_USER}/${GITHUB_REPO}/git/refs/${REFS}/${BRANCH} version.json

RUN \
        cat version.json | jq . && rm -f version.json && \
        git clone --recurse-submodules "https://github.com/${GITHUB_USER}/${GITHUB_REPO}" . && \
        git checkout "${BRANCH}" && \
        git rev-parse --abbrev-ref HEAD && \
        git log -n8 --pretty=tformat:"%h %ai (%aN) %s"

RUN \
	git submodule update --init && \
        export OPENSCAD_COMMIT=$(/bin/"$COMMIT" && git log -1 --pretty=format:%h || echo "") && \
	mkdir build && \
	cd build && \
	cmake .. \
		-DCMAKE_INSTALL_PREFIX=/usr/local \
		-DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
		-DEXPERIMENTAL=${SNAPSHOT} \
		-DSNAPSHOT=${SNAPSHOT} \
		-DOPENSCAD_VERSION="$OPENSCAD_VERSION" \
		-DOPENSCAD_COMMIT="$OPENSCAD_COMMIT" \
		-DENABLE_EGL=ON \
		&& \
	make -j"$JOBS"

USER root
WORKDIR /openscad/build
RUN make install

FROM debian:bookworm-slim

RUN apt-get update

RUN apt-get -y full-upgrade

RUN apt-get install -y --no-install-recommends \
	libcairo2 libdouble-conversion3 libxml2 lib3mf1 libzip4 libharfbuzz0b \
	libboost-thread1.74.0 libboost-program-options1.74.0 libboost-filesystem1.74.0 \
	libboost-regex1.74.0 libopencsg1 libmpfr6 libqscintilla2-qt5-15 \
	libqt5multimedia5 libqt5concurrent5 libglu1-mesa \
	libopengl0

RUN apt-get clean

WORKDIR /tmp

COPY --from=builder /egl .

RUN dpkg -i *.deb && rm -f *.deb

WORKDIR /usr/local

COPY --from=builder /usr/local/ .

WORKDIR /openscad
